{"version":3,"sources":["firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","className","placeholder","text","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemText","primary","secondary","color","variant","e","cursor","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3337132.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// const firebaseConfig = {\n//     apiKey: \"AIzaSyCwzn09XIyrpZMSRxW7GMNPwiYTvrnKvRw\",\n//     authDomain: \"todo-app-fcedb.firebaseapp.com\",\n//     projectId: \"todo-app-fcedb\",\n//     storageBucket: \"todo-app-fcedb.appspot.com\",\n//     messagingSenderId: \"1080332269697\",\n//     appId: \"1:1080332269697:web:caeaf1b47e50ba8b877580\",\n//     measurementId: \"G-9D3H66Z1TG\"\n//   };\n\nimport firebase from \"firebase\"\n\nconst firebaseApp = firebase.initializeApp({\n\n        // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\n        apiKey: \"AIzaSyCwzn09XIyrpZMSRxW7GMNPwiYTvrnKvRw\",\n        authDomain: \"todo-app-fcedb.firebaseapp.com\",\n        projectId: \"todo-app-fcedb\",\n        storageBucket: \"todo-app-fcedb.appspot.com\",\n        messagingSenderId: \"1080332269697\",\n        appId: \"1:1080332269697:web:caeaf1b47e50ba8b877580\",\n        measurementId: \"G-9D3H66Z1TG\"\n\n\n});\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState } from 'react'\nimport './Todo.css'\nimport { List, ListItem, ListItemText, ListItemAvatar, Button, Modal } from '@material-ui/core'\nimport db from './firebase';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    // get from material ui modal search in google for stling modal\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\n\nfunction Todo(props) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [input, setInput] = useState('');\n    const handleOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const updateTodo = () => {\n        db.collection('todos').doc(props.text.id).set({\n            todo: input\n        }, { merge: true })\n        setInput('');\n        setOpen(false);\n    }\n\n\n    return (\n        <>\n            <Modal open={open} onClose={handleClose}>\n                <div className={classes.paper}>\n                    <h1>hi MODEL</h1>\n                    <input placeholder={props.text.todo} value={input} onChange={event => setInput(event.target.value)} />\n                    <Button onClick={updateTodo}>Update Todo</Button>\n                </div>\n            </Modal>\n            <List className=\"todo_list\">\n                {/* <ListItemAvatar>\n            </ListItemAvatar> */}\n                <ListItem>\n                    <ListItemText primary={props.text.todo} secondary={props.text.todo} />\n                </ListItem>\n                <Button color=\"primary\" variant=\"contained\" onClick={e => setOpen(true)}>EDIT</Button>\n                <DeleteIcon cursor=\"pointer\" color=\"secondary\" onClick={event => db.collection('todos').doc(props.text.id).delete()} />\n\n            </List>\n        </>\n    )\n};\n\nexport default Todo;\n","import './App.css';\nimport Todo from './Todo'\nimport React, { useState, useEffect } from 'react'\nimport { Button, FormControl, FormHelperText, Input, InputLabel } from '@material-ui/core';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  //when the app loads, we need to listen to database and fetch new todos as they added or removed\n\n  useEffect(() => {\n    //when app.js loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo })))\n    })\n  }, [])\n\n  const addTodo = (event) => {\n    event.preventDefault(); // stop refresh\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setTodos([...todos, input]);\n    setInput(''); //clear up the input after clicking to button\n  }\n  return (\n    <div className=\"App\">\n      <h1>Todo App </h1>\n      <form>\n        {/* <input  /> */}\n        <FormControl>\n          <InputLabel>Enter TODO</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)} />\n          {/* <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText> */}\n        </FormControl>\n        <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">Add List</Button>\n      </form>\n\n\n      <ul>\n        {todos.map(todo => (\n          // <li>{todo}</li>\n          <Todo text={todo} />\n        )\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}